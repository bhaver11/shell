My shell
Author : Bhaveshkumar Yadav
Roll Number: 193050052
For : CS 744, Assingment 1 (IIT BOMBAY)

Instructions to build and run the shell. 

Directory contents : 
    1. "input" - File containing commands to be executed by the shell. 
    2. "Makefile" - File used for building and running the shell.
    3. "myshell.c" - Main source code file. 
    4. "myshell.h" - Header file containing the declaration of functions in "myshell.c"
    5. "shell" - executable file which will be generated by Makefile command. 

Building the executable :
    1. Open command prompt
    2. Enter the command : "make" and press Enter
    3. Executable file "shell" will be created

Running the executable :
    There are two ways to run the shell (Enter these commands in command prompt)
        1. "make run"
        2. "./shell"
    About modes :
        1.File mode : When you run the shell through "make run" the shell will take
        commands from the file "input" which is placed in the directory. In the file
        each line is a command. 
        You can also give a custom file as input by running the shell using the command
            "./shell < myinputfile"
        In this case the shell will run and execute commands present in "myinputfile"
        The output in each case will be printed on the terminal. 

        2.Prompt mode : In the mode the shell will prompt the user for input just like
        the built in shell. 
        To run in this mode simple use the command : "./shell"

Exiting from the shell:
    1. In case of 'File mode' the shell exits as soon as all the commands in the file are executed.
    2. In 'prompt mode' to exit type 'quit' in the shell and press enter. 

Shell commands:
    The shell supports most of the commands which are supported by bash shell in linux system.

Background commands:
    To run a command in background append the command with a '&'
    Example : sleep 2 &, will cause sleep 2 to run in background and shell will return to prompt immediately.

Multiple Serial commands:
    To run multiple commands, one after the other. Such that the next doesn't start before the first finishes
    use '&&' between the commands. 
    Example: echo ab && sleep 2 && ls -l ==> Will print ab, then the shell will wait for 2 seconds and then list
    directory content. 

Parallel commands:
    To run commands in parallel use '&&&'
    Example: ls &&& pwd &&& sleep 5 ==> ls and pwd will print the result immediately and shell will return to prompt
    after 5 seconds. 

Note: &, && and &&& cannot be combined in a single line of command.

Input from file:
    To take input from a file for a specific command, follow that command with "< filename"
    Example: 'wc -l < myfile' ==> will print the number of lines in the file 'myfile'

Output to a file:
    To print the output to a file instead of the shell terminal, follow the command with "> filename"
    Example: 'echo hello > myfile' will print 'hello' in file 'myfile'

Note: Input and Output redirection both can be used in the same command too. 
    Ex: command < inputfile > outputfile

Some references: 
- https://www.geeksforgeeks.org/strtok-strtok_r-functions-c-examples/
- https://www.geeksforgeeks.org/zombie-processes-prevention/
- https://www.tutorialspoint.com/c_standard_library/c_function_freopen.htm